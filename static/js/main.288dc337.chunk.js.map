{"version":3,"sources":["pages/Homepage/index.tsx","pages/JsonToInterface/index.tsx","routes/index.tsx","lang/i18n.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["JsonToInterface","Helmet","charSet","React","memo","useState","jsonValue","setJsonValue","interfaceValue","setInterfaceValue","onJsonValueInput","useCallback","e","target","value","res","dealObject","obj","level","tmp","whitespace","propertyWhitespace","i","Object","keys","forEach","key","JSON","parse","className","placeholder","onInput","disabled","routes","path","process","exact","component","Homepage","i18n","use","LanguageDetector","initReactI18next","init","resources","en","translation","enUsTrans","zh","zhCnTrans","fallbackLng","debug","interpolation","escapeValue","App","renderRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"krEAGMA,EAA4B,WAChC,OACE,gCACE,eAACC,EAAA,EAAD,WACE,sBAAMC,QAAQ,UACd,oDAEF,+DAKSC,MAAMC,KAAKJ,G,QCXpBA,G,MAA4B,WAChC,MAAkCK,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAmBC,uBACvB,SAACC,GACCL,EAAaK,EAAEC,OAAOC,OACtB,IAAIC,EAAM,4BAwBVA,GAtBmB,SAAbC,EAAcC,EAAiBC,GAInC,IAHA,IAAIC,EAAM,IACNC,EAAa,GACbC,EAAqB,KAChBC,EAAI,EAAGA,EAAIJ,EAAOI,IACzBF,GAAc,KACdC,GAAsB,KAaxB,OAXAE,OAAOC,KAAKP,GAAKQ,SAAQ,SAACC,GACA,kBAAbT,EAAIS,GACbP,GAAG,YAASE,GAAT,OAA8BD,GAA9B,OAA2CM,EAA3C,aAAmDV,EACpDC,EAAIS,GACJR,EAAQ,IAGVC,GAAG,YAASE,GAAT,OAA8BK,EAA9B,oBAA6CT,EAAIS,OAGxDP,GAAG,YAASC,EAAT,KAIEJ,CADYW,KAAKC,MAAMtB,GACA,GAC9BG,EAAkBM,KAEpB,CAACT,IAGH,OACE,qCACE,eAACL,EAAA,EAAD,gCACE,sBAAMC,QAAQ,QAAd,uBACA,mFAEF,sBAAK2B,UAAU,8BAAf,+BACE,0BAAUC,YAAY,yBAAUC,QAASrB,EAAzC,uBAEA,0BAAUsB,UAAQ,EAACF,YAAY,YAAYhB,MAAON,EAAlD,+BAMOL,MAAMC,KAAKJ,GCjCXiC,EAjBe,CAC5B,CACEC,KAAK,GAAD,OACsCC,iBADtC,KAGJC,OAAO,EACPC,UAAWC,GAEb,CACEJ,KAAK,GAAD,OACsCC,iBADtC,sBAGJC,OAAO,EACPC,UAAWrC,I,wCCbfuC,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CAEJC,UAAW,CACTC,GAAI,CACFC,YAAaC,GAEfC,GAAI,CACFF,YAAaG,IAIjBC,YAAa,KACbC,OAAO,EACPC,cAAe,CACbC,aAAa,KAIJd,EAAf,E,MAAeA,ICVAe,EAJO,WACpB,OAAO,cAAC,IAAD,UAAgBC,YAAatB,MCAvBuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.288dc337.chunk.js","sourcesContent":["import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst JsonToInterface: React.FC = () => {\n  return (\n    <div>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>首页</title>\n      </Helmet>\n      <div>这是首页</div>\n    </div>\n  )\n}\n\nexport default React.memo(JsonToInterface)\n","import React, { useCallback, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport './style.scoped.scss'\n\nconst JsonToInterface: React.FC = () => {\n  const [jsonValue, setJsonValue] = useState('')\n  const [interfaceValue, setInterfaceValue] = useState('')\n\n  const onJsonValueInput = useCallback(\n    (e) => {\n      setJsonValue(e.target.value)\n      let res = 'interface #interfaceName#'\n\n      const dealObject = (obj: JsonObject, level: number) => {\n        let tmp = '{'\n        let whitespace = ''\n        let propertyWhitespace = '  '\n        for (let i = 1; i < level; i++) {\n          whitespace += '  '\n          propertyWhitespace += '  '\n        }\n        Object.keys(obj).forEach((key) => {\n          if (typeof obj[key] === 'object') {\n            tmp += `\\n${propertyWhitespace}${whitespace}${key}: ${dealObject(\n              obj[key] as JsonObject,\n              level + 1\n            )}`\n          } else {\n            tmp += `\\n${propertyWhitespace}${key}: ${typeof obj[key]}`\n          }\n        })\n        tmp += `\\n${whitespace}}`\n        return tmp\n      }\n      const jsonObject = JSON.parse(jsonValue)\n      res += dealObject(jsonObject, 1)\n      setInterfaceValue(res)\n    },\n    [jsonValue]\n  )\n\n  return (\n    <>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>json转ts interface</title>\n      </Helmet>\n      <div className=\"json-to-interface-container\">\n        <textarea placeholder=\"请输入json\" onInput={onJsonValueInput} />\n        {/* <div className=\"transfer-btn\">转换</div> */}\n        <textarea disabled placeholder=\"interface\" value={interfaceValue} />\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(JsonToInterface)\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport Homepage from '@/pages/Homepage'\nimport JsonToInterface from '@/pages/JsonToInterface'\nimport { RouteConfig } from 'react-router-config'\n\nconst routes: RouteConfig[] = [\n  {\n    path: `${\n      process.env.NODE_ENV === 'production' ? process.env.PUBLIC_URL : ''\n    }/`,\n    exact: true,\n    component: Homepage,\n  },\n  {\n    path: `${\n      process.env.NODE_ENV === 'production' ? process.env.PUBLIC_URL : ''\n    }/json-to-interface`,\n    exact: true,\n    component: JsonToInterface,\n  },\n]\n\nexport default routes\n","import LanguageDetector from 'i18next-browser-languagedetector'\nimport i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\nimport enUsTrans from './en-us.json'\nimport zhCnTrans from './zh-cn.json'\n\ni18n\n  .use(LanguageDetector) // 嗅探当前浏览器语言\n  .use(initReactI18next) // init i18next\n  .init({\n    // 引入资源文件\n    resources: {\n      en: {\n        translation: enUsTrans,\n      },\n      zh: {\n        translation: zhCnTrans,\n      },\n    },\n    // 选择默认语言，选择内容为上述配置中的key，即en/zh\n    fallbackLng: 'zh',\n    debug: false,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  })\n\nexport default i18n\n","/*\n * @Date: 2021-03-04 15:31:31\n * @LastEditors: ZHT\n * @LastEditTime: 2021-03-04 16:07:09\n */\nimport React from 'react'\nimport { renderRoutes } from 'react-router-config'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport routes from './routes'\nimport '@/lang/i18n'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return <BrowserRouter>{renderRoutes(routes)}</BrowserRouter>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}